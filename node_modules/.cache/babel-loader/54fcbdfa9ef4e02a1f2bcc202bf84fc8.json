{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-udemi-project\\\\ract router\\\\src\\\\Pages\\\\AllQuote.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllQuote = () => {\n  _s();\n  const {\n    sendRequest,\n    error,\n    status,\n    data: loadedQuotes\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n  if (status === \"pending\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  //set true that controls that we start in loading state and that therefore a state is pending\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: Dummy_quotes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n_s(AllQuote, \"/TFt6X50qMWNKUCfu5UZa++/Hx0=\", false, function () {\n  return [useHttp];\n});\n_c = AllQuote;\nexport default AllQuote;\nvar _c;\n$RefreshReg$(_c, \"AllQuote\");","map":{"version":3,"names":["React","useEffect","QuoteList","useHttp","getAllQuotes","LoadingSpinner","AllQuote","sendRequest","error","status","data","loadedQuotes","Dummy_quotes"],"sources":["D:/react-udemi-project/ract router/src/Pages/AllQuote.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst AllQuote = () => {\r\n  const {\r\n    sendRequest,\r\n    error,\r\n    status,\r\n    data: loadedQuotes,\r\n  } = useHttp(getAllQuotes, true);\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if(error){\r\n    return <p></p>\r\n  }\r\n  //set true that controls that we start in loading state and that therefore a state is pending\r\n  return <QuoteList quotes={Dummy_quotes} />;\r\n};\r\n\r\nexport default AllQuote;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,gCAAgC;AACtD,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAASC,YAAY,QAAQ,YAAY;AACzC,OAAOC,cAAc,MAAM,iCAAiC;AAAC;AAE7D,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB,MAAM;IACJC,WAAW;IACXC,KAAK;IACLC,MAAM;IACNC,IAAI,EAAEC;EACR,CAAC,GAAGR,OAAO,CAACC,YAAY,EAAE,IAAI,CAAC;EAC/BH,SAAS,CAAC,MAAM;IACdM,WAAW,EAAE;EACf,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EACjB,IAAIE,MAAM,KAAK,SAAS,EAAE;IACxB,oBACE;MAAK,SAAS,EAAC,UAAU;MAAA,uBACvB,QAAC,cAAc;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACd;EAEV;EACA,IAAGD,KAAK,EAAC;IACP,oBAAO;MAAA;MAAA;MAAA;IAAA,QAAO;EAChB;EACA;EACA,oBAAO,QAAC,SAAS;IAAC,MAAM,EAAEI;EAAa;IAAA;IAAA;IAAA;EAAA,QAAG;AAC5C,CAAC;AAAC,GAtBIN,QAAQ;EAAA,QAMRH,OAAO;AAAA;AAAA,KANPG,QAAQ;AAwBd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}